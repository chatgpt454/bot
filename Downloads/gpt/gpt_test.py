import logging
import asyncio
import nest_asyncio
import requests
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from io import BytesIO
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# ‚úÖ Telegram Bot Token
TELEGRAM_TOKEN = '7457980064:AAH6Oxvo9deuM8qyjEqChhLefTPjYJCmmM0'

# ‚úÖ Exchange Rate API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
EXCHANGE_API_KEY = 'https://api.exchangerate-api.com/v4/latest/USD'

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'UAH', 'RUB']

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
default_language = 'UA'

# –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π)
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç 11 –∫–Ω–æ–ø–æ–∫:
# 0: "‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥", 1: "‚ûñ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏",
# 2: "üìä –ë–∞–ª–∞–Ω—Å", 3: "üìã –Ü—Å—Ç–æ—Ä—ñ—è",
# 4: "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", 5: "üí≥ –ë–æ—Ä–≥–∏",
# 6: "üè¶ –ö—Ä–µ–¥–∏—Ç–∏", 7: "üí≤ –í–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏",
# 8: "üí° –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", 9: "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è",
# 10: "‚ùì Help"
categories = {
    'UA': {
        'income': ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üí∏ –ë–æ–Ω—É—Å', 'üíµ –§—Ä—ñ–ª–∞–Ω—Å', 'üí≤ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', 'üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏', 'üèÜ –ü—Ä–∏–∑'],
        'expense': ['üçî –á–∂–∞', 'üè† –û—Ä–µ–Ω–¥–∞', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üéâ –†–æ–∑–≤–∞–≥–∏', 'üí° –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω', 'üõç –®–æ–ø—ñ–Ω–≥', 'üíä –ó–¥–æ—Ä–æ–≤‚Äô—è', 'üíª –ü—ñ–¥–ø–∏—Å–∫–∏'],
        'buttons': {
            'main': [
                "‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥", "‚ûñ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏",
                "üìä –ë–∞–ª–∞–Ω—Å", "üìã –Ü—Å—Ç–æ—Ä—ñ—è",
                "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", "üí≥ –ë–æ—Ä–≥–∏",
                "üè¶ –ö—Ä–µ–¥–∏—Ç–∏", "üí≤ –í–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏",
                "üí° –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è",
                "‚ùì Help"
            ]
        }
    }
}

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π)
financial_tips = {
    'UA': {
        'Savings': ["–û–∫–ª–∞–¥–∞–π—Ç–µ 10% –≤—ñ–¥ –¥–æ—Ö–æ–¥—É.", "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ–¥–∞—Ç–∫–∏ –¥–ª—è –±—é–¥–∂–µ—Ç—É.", "–°–∫–æ—Ä–æ—á—É–π—Ç–µ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏."],
        'Investments': ["–ü–æ—á–Ω—ñ—Ç—å –∑ —ñ–Ω–¥–µ–∫—Å–Ω–∏—Ö —Ñ–æ–Ω–¥—ñ–≤.", "–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π—Ç–µ —Å–≤—ñ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å.", "–Ü–Ω–≤–µ—Å—Ç—É–π—Ç–µ –Ω–∞ –¥–æ–≤–≥–∏–π —Ç–µ—Ä–º—ñ–Ω."],
        'Debt Management': ["–°–ø–æ—á–∞—Ç–∫—É –ø–æ–≥–∞—à–∞–π—Ç–µ –±–æ—Ä–≥–∏ –∑ –≤–∏—Å–æ–∫–∏–º–∏ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏.", "–£–Ω–∏–∫–∞–π—Ç–µ –Ω–æ–≤–∏—Ö –±–æ—Ä–≥—ñ–≤.", "–î–æ–º–æ–≤–ª—è–π—Ç–µ—Å—å –ø—Ä–æ –∫—Ä–∞—â—ñ —É–º–æ–≤–∏."],
        'Expense Optimization': ["–í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ —Å–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏.", "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫—É–ø–æ–Ω–∏ —Ç–∞ –∑–Ω–∏–∂–∫–∏.", "–û–±–º–µ–∂—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏."],
        'Business Ideas': ["–†–æ–∑–ø–æ—á–Ω—ñ—Ç—å –ø–æ–±—ñ—á–Ω–∏–π –±—ñ–∑–Ω–µ—Å.", "–Ü–Ω–≤–µ—Å—Ç—É–π—Ç–µ –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∫–æ–º–µ—Ä—Ü—ñ—é.", "–°–ø—Ä–æ–±—É–π—Ç–µ —Ñ—Ä—ñ–ª–∞–Ω—Å."],
        'Random Tips': ["–ó–∞–≤–∂–¥–∏ –≤—ñ–¥–∫–ª–∞–¥–∞–π –Ω–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏.", "–ù–∞–≤—á—ñ—Ç—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç–∏ —Å–≤–æ—ó–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏.", "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π –±—é–¥–∂–µ—Ç."]
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
def generate_financial_report(user_id):
    data = user_data[user_id]
    income_list = data.get("income", [])
    expense_list = data.get("expense", [])
    total_income = sum(t["amount"] for t in income_list)
    total_expense = sum(t["amount"] for t in expense_list)
    balance = total_income - total_expense
    num_income = len(income_list)
    num_expense = len(expense_list)
    avg_income = total_income / num_income if num_income > 0 else 0
    avg_expense = total_expense / num_expense if num_expense > 0 else 0

    income_categories = {}
    for t in income_list:
        income_categories[t["category"]] = income_categories.get(t["category"], 0) + t["amount"]
    expense_categories = {}
    for t in expense_list:
        expense_categories[t["category"]] = expense_categories.get(t["category"], 0) + t["amount"]
    top_income = sorted(income_categories.items(), key=lambda x: x[1], reverse=True)[:3]
    top_expense = sorted(expense_categories.items(), key=lambda x: x[1], reverse=True)[:3]

    report = f"üìä **–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç:**\n"
    report += f"–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_income} {data['currency']}\n"
    report += f"–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_expense} {data['currency']}\n"
    report += f"–ë–∞–ª–∞–Ω—Å: {balance} {data['currency']}\n\n"
    report += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Ö–æ–¥—ñ–≤: {num_income}, —Å–µ—Ä–µ–¥–Ω—ñ–π –¥–æ—Ö—ñ–¥: {avg_income:.2f} {data['currency']}\n"
    report += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç: {num_expense}, —Å–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_expense:.2f} {data['currency']}\n\n"
    report += f"–¢–æ–ø 3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:\n"
    for cat, amt in top_income:
        report += f"- {cat}: {amt} {data['currency']}\n"
    report += f"\n–¢–æ–ø 3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:\n"
    for cat, amt in top_expense:
        report += f"- {cat}: {amt} {data['currency']}\n"

    if balance < 0:
        report += "\n‚ö†Ô∏è –£–≤–∞–≥–∞! –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –¥–æ—Ö—ñ–¥. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–Ω–∏–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç."
    else:
        report += "\n‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ —Å–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏."
    return report

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
def get_exchange_rates(base_currency):
    try:
        response = requests.get(f"https://api.exchangerate-api.com/v4/latest/{base_currency}")
        data = response.json()
        return data.get('rates', {})
    except Exception as e:
        print(f"Error fetching exchange rates: {e}")
        return {}

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –¥–æ–ª–≥–∞–º/–∫—Ä–µ–¥–∏—Ç–∞–º
async def check_debts(app):
    while True:
        now = datetime.now()
        for user_id, data in user_data.items():
            for debt_type in ["loans", "credits"]:
                for debt in data.get("debts", {}).get(debt_type, []):
                    if not debt.get("notified") and (debt["due_date"] - now).days <= 2:
                        try:
                            await app.bot.send_message(
                                chat_id=user_id,
                                text=f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {debt_type[:-1].capitalize()} '{debt['description']}' –Ω–∞ —Å—É–º—É {debt['amount']} {data['currency']} –º–∞—î —Ç–µ—Ä–º—ñ–Ω –ø–æ–≥–∞—à–µ–Ω–Ω—è {debt['due_date'].strftime('%Y-%m-%d')}."
                            )
                            debt["notified"] = True
                        except Exception as e:
                            print(f"Error sending debt notification: {e}")
        await asyncio.sleep(60)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è–º
async def check_reminders(app):
    while True:
        now = datetime.now()
        for user_id, data in user_data.items():
            for rem in data.get("reminders", []):
                if not rem.get("notified") and rem["due_date"] <= now:
                    try:
                        await app.bot.send_message(
                            chat_id=user_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è: {rem['text']}\n(–ß–∞—Å: {rem['due_date'].strftime('%Y-%m-%d %H:%M')})"
                        )
                        rem["notified"] = True
                    except Exception as e:
                        print(f"Error sending reminder notification: {e}")
        await asyncio.sleep(60)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "income": [],
        "expense": [],
        "currency": "USD",
        "language": default_language,
        "awaiting_input": None,
        "awaiting_edit": None,
        # –î–ª—è –±–æ—Ä–≥—ñ–≤: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–∫—Ä–µ–º–æ –≥—Ä–æ—à—ñ, —è–∫—ñ –≤–∏ –¥–∞–ª–∏ (loans) —ñ –≤–∑—è–ª–∏ (borrowed)
        "debts": {"loans": [], "borrowed": []},
        # –î–ª—è –∫—Ä–µ–¥–∏—Ç—ñ–≤: –≤–≤–µ–¥–µ–Ω–Ω—è —Å–ø—Ä–æ—â–µ–Ω–æ ‚Äì —Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ–≤)
        "credits": [],
        # –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—å
        "reminders": []
    }
    main_buttons = [
        "‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥", "‚ûñ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏",
        "üìä –ë–∞–ª–∞–Ω—Å", "üìã –Ü—Å—Ç–æ—Ä—ñ—è",
        "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", "üí≥ –ë–æ—Ä–≥–∏",
        "üè¶ –ö—Ä–µ–¥–∏—Ç–∏", "üí≤ –í–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏",
        "üí° –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è",
        "‚ùì Help"
    ]
    keyboard = [
        [KeyboardButton(main_buttons[0]), KeyboardButton(main_buttons[1])],
        [KeyboardButton(main_buttons[2]), KeyboardButton(main_buttons[3])],
        [KeyboardButton(main_buttons[4]), KeyboardButton(main_buttons[5])],
        [KeyboardButton(main_buttons[6]), KeyboardButton(main_buttons[7])],
        [KeyboardButton(main_buttons[8]), KeyboardButton(main_buttons[9])],
        [KeyboardButton(main_buttons[10])]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üíµ –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º**\n\n"
        "‚ûï **–î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥** ‚Äì –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ—Ö–æ–¥—É —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É.\n"
        "‚ûñ **–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏** ‚Äì –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É.\n"
        "üìä **–ë–∞–ª–∞–Ω—Å** ‚Äì –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –¥–æ—Ö–æ–¥–∏, –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –±–∞–ª–∞–Ω—Å.\n"
        "üí± **–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç** ‚Äì –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó (–ø–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É).\n"
        "üí≤ **–í–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏** ‚Äì –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–ª—ñ–∫—É.\n"
        "üí≥ **–ë–æ—Ä–≥–∏** ‚Äì –ó–∞–ø–∏—Å—É–π—Ç–µ, —â–æ –≤–∏ –¥–∞–ª–∏ –≤ –±–æ—Ä–≥ (‚ûï –í—ñ–¥–¥–∞–≤) –∞–±–æ –≤–∑—è–ª–∏ (‚ûï –ë—Ä–∞–≤), —Ñ–æ—Ä–º–∞—Ç: —Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD).\n"
        "üè¶ **–ö—Ä–µ–¥–∏—Ç–∏** ‚Äì –ó–∞–ø–∏—Å—É–π—Ç–µ –∫—Ä–µ–¥–∏—Ç–∏, —Ñ–æ—Ä–º–∞—Ç: —Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–≤ –º—ñ—Å—è—Ü—è—Ö); –¥–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–Ω—è –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.\n"
        "‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è** ‚Äì –î–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è, —Ñ–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç, YYYY-MM-DD HH:MM.\n"
        "üìã **–Ü—Å—Ç–æ—Ä—ñ—è** ‚Äì –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è.\n"
        "üí° **–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏** ‚Äì –û—Ç—Ä–∏–º–∞–π—Ç–µ –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–æ—Ä–∞–¥—É –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤.\n"
        "‚ùì **Help** ‚Äì –¶—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    main_buttons = categories[default_language]['buttons']['main']
    
    # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏
    if text in main_buttons:
        user_data[user_id]["awaiting_input"] = None
        user_data[user_id]["awaiting_edit"] = None

    # –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
    if user_data[user_id].get("awaiting_edit"):
        try:
            new_value = text
            edit_info = user_data[user_id]["awaiting_edit"]
            trans_type = edit_info["type"]
            trans_id = edit_info["id"]
            updated = False
            if trans_type in ["income", "expense"]:
                try:
                    new_amount = float(new_value)
                    for trans in user_data[user_id][trans_type]:
                        if trans["id"] == trans_id:
                            trans["amount"] = new_amount
                            updated = True
                            await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å '{trans['category']}' –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_amount} {user_data[user_id]['currency']}.")
                            break
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.")
                    return
            elif trans_type in ["debt", "credit"]:
                try:
                    new_amount = float(new_value)
                    key = "loans" if trans_type == "debt" else None
                    if trans_type == "debt":
                        for d in user_data[user_id]["debts"]["loans"]:
                            if d["id"] == trans_id:
                                d["amount"] = new_amount
                                updated = True
                                await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_amount} {user_data[user_id]['currency']}.")
                                break
                    else:
                        for d in user_data[user_id]["credits"]:
                            if d["id"] == trans_id:
                                d["amount"] = new_amount
                                # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ä–º—ñ–Ω—É
                                months = d.get("term", 0)
                                d["due_date"] = datetime.now() + timedelta(days=30*months)
                                updated = True
                                await update.message.reply_text(f"‚úÖ –ö—Ä–µ–¥–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_amount} {user_data[user_id]['currency']}.")
                                break
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –∑–∞–ø–∏—Å–∏.")
                    return
            elif trans_type == "reminder":
                for r in user_data[user_id]["reminders"]:
                    if r["id"] == trans_id:
                        r["text"] = new_value
                        updated = True
                        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_value}")
                        break
            if not updated:
                await update.message.reply_text("‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            user_data[user_id]["awaiting_edit"] = None
        except Exception as e:
            await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ.")
        return

    # –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è
    if user_data[user_id].get("awaiting_input"):
        action, category = user_data[user_id]["awaiting_input"]
        try:
            if action in ['income', 'expense', 'convert']:
                amount = float(text)
                transaction = {
                    "id": int(datetime.now().timestamp() * 1000),
                    "category": category,
                    "amount": amount,
                    "timestamp": datetime.now()
                }
                if action == 'income':
                    user_data[user_id]['income'].append(transaction)
                    await update.message.reply_text(f"‚úÖ {category} –Ω–∞ {amount} {user_data[user_id]['currency']} –¥–æ–¥–∞–Ω–æ.")
                elif action == 'expense':
                    user_data[user_id]['expense'].append(transaction)
                    await update.message.reply_text(f"‚úÖ {category} –Ω–∞ {amount} {user_data[user_id]['currency']} –¥–æ–¥–∞–Ω–æ.")
                elif action == 'convert':
                    rates = get_exchange_rates(user_data[user_id]['currency'])
                    converted = {cur: round(amount * rate, 2) for cur, rate in rates.items() if cur in currencies}
                    result = "\n".join([f"{cur}: {amt}" for cur, amt in converted.items()])
                    await update.message.reply_text(f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:\n{result}")
            elif action == 'debt':
                # –§–æ—Ä–º–∞—Ç: —Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD)
                parts = [p.strip() for p in text.split(",")]
                if len(parts) != 3:
                    raise ValueError
                debt_amount = float(parts[0])
                description = parts[1]
                due_date = datetime.strptime(parts[2], "%Y-%m-%d")
                debt_record = {
                    "id": int(datetime.now().timestamp() * 1000),
                    "amount": debt_amount,
                    "description": description,
                    "due_date": due_date,
                    "timestamp": datetime.now(),
                    "notified": False
                }
                user_data[user_id]["debts"]["loans"].append(debt_record)
                await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å (–≤—ñ–¥–¥–∞–≤) –Ω–∞ {debt_amount} {user_data[user_id]['currency']} –¥–æ–¥–∞–Ω–æ. –¢–µ—Ä–º—ñ–Ω: {due_date.strftime('%Y-%m-%d')}")
            elif action == 'borrow':
                # –§–æ—Ä–º–∞—Ç: —Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD)
                parts = [p.strip() for p in text.split(",")]
                if len(parts) != 3:
                    raise ValueError
                debt_amount = float(parts[0])
                description = parts[1]
                due_date = datetime.strptime(parts[2], "%Y-%m-%d")
                debt_record = {
                    "id": int(datetime.now().timestamp() * 1000),
                    "amount": debt_amount,
                    "description": description,
                    "due_date": due_date,
                    "timestamp": datetime.now(),
                    "notified": False
                }
                user_data[user_id]["debts"]["borrowed"].append(debt_record)
                await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å (–±—Ä–∞–≤) –Ω–∞ {debt_amount} {user_data[user_id]['currency']} –¥–æ–¥–∞–Ω–æ. –¢–µ—Ä–º—ñ–Ω: {due_date.strftime('%Y-%m-%d')}")
            elif action == 'credit':
                # –§–æ—Ä–º–∞—Ç: —Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–≤ –º—ñ—Å—è—Ü—è—Ö)
                parts = [p.strip() for p in text.split(",")]
                if len(parts) != 3:
                    raise ValueError
                credit_amount = float(parts[0])
                description = parts[1]
                term_months = int(parts[2])
                due_date = datetime.now() + timedelta(days=30 * term_months)
                credit_record = {
                    "id": int(datetime.now().timestamp() * 1000),
                    "amount": credit_amount,
                    "description": description,
                    "term": term_months,
                    "due_date": due_date,
                    "timestamp": datetime.now(),
                    "notified": False
                }
                user_data[user_id]["credits"].append(credit_record)
                await update.message.reply_text(f"‚úÖ –ö—Ä–µ–¥–∏—Ç –Ω–∞ {credit_amount} {user_data[user_id]['currency']} –¥–æ–¥–∞–Ω–æ. –¢–µ—Ä–º—ñ–Ω –ø–æ–≥–∞—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {term_months} –º—ñ—Å—è—Ü—ñ–≤.")
            elif action == 'reminder':
                # –§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç, YYYY-MM-DD HH:MM
                parts = [p.strip() for p in text.split(",", 1)]
                if len(parts) != 2:
                    raise ValueError
                reminder_text = parts[0]
                due_dt = datetime.strptime(parts[1], "%Y-%m-%d %H:%M")
                reminder_record = {
                    "id": int(datetime.now().timestamp() * 1000),
                    "text": reminder_text,
                    "due_date": due_dt,
                    "timestamp": datetime.now(),
                    "notified": False
                }
                user_data[user_id]["reminders"].append(reminder_record)
                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: '{reminder_text}' –Ω–∞ {due_dt.strftime('%Y-%m-%d %H:%M')}")
            user_data[user_id]["awaiting_input"] = None
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è.\n–î–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.\n–î–ª—è –±–æ—Ä–≥–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ ‚Äì –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD)\n–î–ª—è –∫—Ä–µ–¥–∏—Ç—ñ–≤ ‚Äì –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ–≤)\n–î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—å ‚Äì –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Ç–µ–∫—Å—Ç, YYYY-MM-DD HH:MM")
        return

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if text == main_buttons[0]:
        # "–î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥"
        income_cats = categories[default_language]['income']
        keyboard = []
        for i in range(0, len(income_cats), 2):
            row = [InlineKeyboardButton(income_cats[i], callback_data=f'income_{income_cats[i]}')]
            if i + 1 < len(income_cats):
                row.append(InlineKeyboardButton(income_cats[i+1], callback_data=f'income_{income_cats[i+1]}'))
            keyboard.append(row)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üíµ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ—Ö–æ–¥—É:\n(–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É)", reply_markup=reply_markup)
    elif text == main_buttons[1]:
        # "–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏"
        expense_cats = categories[default_language]['expense']
        keyboard = []
        for i in range(0, len(expense_cats), 2):
            row = [InlineKeyboardButton(expense_cats[i], callback_data=f'expense_{expense_cats[i]}')]
            if i + 1 < len(expense_cats):
                row.append(InlineKeyboardButton(expense_cats[i+1], callback_data=f'expense_{expense_cats[i+1]}'))
            keyboard.append(row)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üí∏ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç:", reply_markup=reply_markup)
    elif text == main_buttons[2]:
        # "–ë–∞–ª–∞–Ω—Å"
        report = generate_financial_report(user_id)
        await update.message.reply_text(report, parse_mode="Markdown")
    elif text == main_buttons[3]:
        # "–Ü—Å—Ç–æ—Ä—ñ—è"
        if not user_data[user_id]["income"] and not user_data[user_id]["expense"]:
            await update.message.reply_text("–ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.")
        else:
            if user_data[user_id]["income"]:
                await update.message.reply_text("üí∞ –î–æ—Ö–æ–¥–∏:")
                for trans in user_data[user_id]["income"]:
                    trans_msg = (f"ID: {trans['id']}\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {trans['category']}\n"
                                 f"–°—É–º–∞: {trans['amount']} {user_data[user_id]['currency']}\n"
                                 f"–ß–∞—Å: {trans['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
                    keyboard = [[
                        InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f'edit_income_{trans["id"]}'),
                        InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'delete_income_{trans["id"]}')
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(trans_msg, reply_markup=reply_markup)
            if user_data[user_id]["expense"]:
                await update.message.reply_text("üí∏ –í–∏—Ç—Ä–∞—Ç–∏:")
                for trans in user_data[user_id]["expense"]:
                    trans_msg = (f"ID: {trans['id']}\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {trans['category']}\n"
                                 f"–°—É–º–∞: {trans['amount']} {user_data[user_id]['currency']}\n"
                                 f"–ß–∞—Å: {trans['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
                    keyboard = [[
                        InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f'edit_expense_{trans["id"]}'),
                        InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'delete_expense_{trans["id"]}')
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(trans_msg, reply_markup=reply_markup)
    elif text == main_buttons[4]:
        # "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"
        user_data[user_id]["awaiting_input"] = ("convert", "")
        await update.message.reply_text("üí± –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:")
    elif text == main_buttons[5]:
        # "–ë–æ—Ä–≥–∏" ‚Äì –º–µ–Ω—é –¥–ª—è –±–æ—Ä–≥–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (–≤—ñ–¥–¥–∞–≤ / –±—Ä–∞–≤)
        keyboard = [
            [InlineKeyboardButton("‚ûï –í—ñ–¥–¥–∞–≤", callback_data="debt_add")],
            [InlineKeyboardButton("‚ûï –ë—Ä–∞–≤", callback_data="borrow_add")],
            [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–æ—Ä–≥–∏", callback_data="debt_view")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –±–æ—Ä–≥—ñ–≤:\n(–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD))", reply_markup=reply_markup)
    elif text == main_buttons[6]:
        # "–ö—Ä–µ–¥–∏—Ç–∏" ‚Äì –º–µ–Ω—é –¥–ª—è –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–≤–≤–µ–¥–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ–≤))
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç", callback_data="credit_add")],
            [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏", callback_data="credit_view")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üè¶ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –∫—Ä–µ–¥–∏—Ç—ñ–≤:\n(–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ–≤))", reply_markup=reply_markup)
    elif text == main_buttons[7]:
        # "–í–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏"
        keyboard = [[InlineKeyboardButton(cur, callback_data=f'currency_{cur}')] for cur in currencies]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üí≤ –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–ª—ñ–∫—É:", reply_markup=reply_markup)
    elif text == main_buttons[8]:
        # "–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏"
        tip_category = random.choice(list(financial_tips[default_language].keys()))
        tip = random.choice(financial_tips[default_language][tip_category])
        await update.message.reply_text(f"üí° –ü–æ—Ä–∞–¥–∞: {tip}")
    elif text == main_buttons[9]:
        # "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è" ‚Äì –º–µ–Ω—é –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—å
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è", callback_data="reminder_add")],
            [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è", callback_data="reminder_view")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚è∞ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—å:\n(–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Ç–µ–∫—Å—Ç, YYYY-MM-DD HH:MM)", reply_markup=reply_markup)
    elif text == main_buttons[10]:
        # "Help"
        await help_command(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    data = query.data.split("_")
    action = data[0]
    
    if action in ['income', 'expense']:
        category = "_".join(data[1:])
        user_data[user_id]["awaiting_input"] = (action, category)
        await query.edit_message_text(f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è '{category}':")
    elif action == 'currency':
        selected_currency = data[1]
        user_data[user_id]['currency'] = selected_currency
        await query.edit_message_text(f"–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {selected_currency}.")
    elif action == 'debt':
        # –î—ñ—ó –¥–ª—è –±–æ—Ä–≥—ñ–≤: "debt_add" –∞–±–æ "debt_view"
        subaction = data[1]
        if subaction == "add":
            user_data[user_id]["awaiting_input"] = ("debt", "")
            await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –±–æ—Ä–≥—É (–≤—ñ–¥–¥–∞–≤) —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD)")
        elif subaction == "view":
            debts = user_data[user_id].get("debts", {"loans": []})
            if not debts["loans"]:
                await query.edit_message_text("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –±–æ—Ä–≥—ñ–≤.")
            else:
                messages = []
                for d in debts["loans"]:
                    msg = (f"ID: {d['id']}\n–°—É–º–∞: {d['amount']} {user_data[user_id]['currency']}\n"
                           f"–û–ø–∏—Å: {d['description']}\n–¢–µ—Ä–º—ñ–Ω: {d['due_date'].strftime('%Y-%m-%d')}")
                    messages.append(msg)
                await query.edit_message_text("\n\n".join(messages))
    elif action == 'borrow':
        # –î—ñ—ó –¥–ª—è "–ë—Ä–∞–≤" (–≤–∑—è—Ç–∏ –≤ –±–æ—Ä–≥)
        subaction = data[1]  # —Ç—É—Ç, —è–∫—â–æ callback = "borrow_add"
        if subaction == "add":
            user_data[user_id]["awaiting_input"] = ("borrow", "")
            await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –±–æ—Ä–≥—É (–±—Ä–∞–≤) —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Å—É–º–∞, –æ–ø–∏—Å, –¥–∞—Ç–∞ (YYYY-MM-DD)")
    elif action == 'credit':
        subaction = data[1]
        if subaction == "add":
            user_data[user_id]["awaiting_input"] = ("credit", "")
            await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫—Ä–µ–¥–∏—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Å—É–º–∞, –æ–ø–∏—Å, —Ç–µ—Ä–º—ñ–Ω (–º—ñ—Å—è—Ü—ñ–≤)")
        elif subaction == "view":
            credits = user_data[user_id].get("credits", [])
            if not credits:
                await query.edit_message_text("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∫—Ä–µ–¥–∏—Ç—ñ–≤.")
            else:
                messages = []
                for d in credits:
                    msg = (f"ID: {d['id']}\n–°—É–º–∞: {d['amount']} {user_data[user_id]['currency']}\n"
                           f"–û–ø–∏—Å: {d['description']}\n–¢–µ—Ä–º—ñ–Ω: {d['term']} –º—ñ—Å—è—Ü—ñ–≤\n"
                           f"–ü–æ–≥–∞—à–µ–Ω–Ω—è: {d['due_date'].strftime('%Y-%m-%d')}")
                    messages.append(msg)
                await query.edit_message_text("\n\n".join(messages))
    elif action == 'reminder':
        subaction = data[1]
        if subaction == "add":
            user_data[user_id]["awaiting_input"] = ("reminder", "")
            await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n—Ç–µ–∫—Å—Ç, YYYY-MM-DD HH:MM")
        elif subaction == "view":
            reminders = user_data[user_id].get("reminders", [])
            if not reminders:
                await query.edit_message_text("–ù–µ–º–∞—î –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—å.")
            else:
                messages = []
                for r in reminders:
                    msg = (f"ID: {r['id']}\n–¢–µ–∫—Å—Ç: {r['text']}\n–ß–∞—Å: {r['due_date'].strftime('%Y-%m-%d %H:%M')}")
                    messages.append(msg)
                await query.edit_message_text("\n\n".join(messages))
    elif action.startswith('delete'):
        trans_type = data[1]  # –º–æ–∂–µ –±—É—Ç–∏ income, expense, debt, credit –∞–±–æ reminder
        trans_id = int(data[2])
        if trans_type in ['income', 'expense']:
            original_count = len(user_data[user_id][trans_type])
            user_data[user_id][trans_type] = [t for t in user_data[user_id][trans_type] if t["id"] != trans_id]
            if len(user_data[user_id][trans_type]) < original_count:
                await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        elif trans_type in ['debt', 'credit']:
            if trans_type == "debt":
                key = "loans"
                original = len(user_data[user_id]["debts"][key])
                user_data[user_id]["debts"][key] = [d for d in user_data[user_id]["debts"][key] if d["id"] != trans_id]
            else:
                key = "credits"
                original = len(user_data[user_id]["credits"])
                user_data[user_id]["credits"] = [d for d in user_data[user_id]["credits"] if d["id"] != trans_id]
            if (trans_type == "debt" and len(user_data[user_id]["debts"][key]) < original) or \
               (trans_type == "credit" and len(user_data[user_id]["credits"]) < original):
                await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        elif trans_type == "reminder":
            original = len(user_data[user_id]["reminders"])
            user_data[user_id]["reminders"] = [r for r in user_data[user_id]["reminders"] if r["id"] != trans_id]
            if len(user_data[user_id]["reminders"]) < original:
                await query.edit_message_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    elif action.startswith('edit'):
        trans_type = data[1]
        trans_id = int(data[2])
        category = None
        if trans_type in ['income', 'expense']:
            for t in user_data[user_id][trans_type]:
                if t["id"] == trans_id:
                    category = t["category"]
                    break
        elif trans_type in ['debt', 'credit']:
            if trans_type == "debt":
                key = "loans"
                for d in user_data[user_id]["debts"][key]:
                    if d["id"] == trans_id:
                        category = d["description"]
                        break
            else:
                for d in user_data[user_id]["credits"]:
                    if d["id"] == trans_id:
                        category = d["description"]
                        break
        elif trans_type == "reminder":
            for r in user_data[user_id]["reminders"]:
                if r["id"] == trans_id:
                    category = r["text"]
                    break
        if category:
            user_data[user_id]["awaiting_edit"] = {"type": trans_type, "id": trans_id}
            await query.edit_message_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è '{category}':")
        else:
            await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    asyncio.create_task(check_debts(app))
    asyncio.create_task(check_reminders(app))
    print("üöÄ Bot is running. Type /start or /help to begin.")
    await app.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())
