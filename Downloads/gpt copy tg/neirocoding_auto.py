import asyncio
import re
import os
import random
import openai
import time
from telethon import TelegramClient
from telethon.errors import RPCError, SessionPasswordNeededError
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument

# üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway)
api_id = 21919270
api_hash = 'a25517a604bf99d413bbf3140d3b5962'
phone = '+380990042029'
openai.api_key = os.getenv('OPENAI_API_KEY')

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenAI
client_openai = openai.OpenAI(api_key=openai.api_key)

# üì¢ –ö–∞–Ω–∞–ª—ã
source_channels = ['@Proglib', '@tproger']
destination_channel = '@neirocoding'

# üß† –ö–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('telegram_session', api_id, api_hash)

# üìÇ –§–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
last_id_file = "last_message_id.txt"

# üö´ –†–µ–≥—É–ª—è—Ä–∫–∏
phone_pattern = r'\+?\d[\d\s\-\(\)]{7,}\d'
username_pattern = r'@\w+'
url_pattern = r'https?://\S+'

# üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
keywords = [
    'code', 'coding', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'development',
    '–±–æ—Ç', 'bot', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'automation', 'AI', '–ò–ò',
    '—Ñ—Ä–∏–ª–∞–Ω—Å', 'freelance', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', 'money', '—Ä–∞–±–æ—Ç–∞', 'job',
    '–∫–æ–Ω—Ç–µ–Ω—Ç', 'content', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'marketing', '–ª–µ–Ω–¥–∏–Ω–≥', 'landing',
    '–¥–∏–∑–∞–π–Ω', 'design', 'UI', 'UX', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
    'tech', 'IT', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'software', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', 'tools', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    '—Å—Ç–∞—Ä—Ç–∞–ø', 'startup', '–ø—Ä–æ–¥—É–∫—Ç', 'product', '–ø—Ä–æ–¥–∞–∂–∏', 'sales',
    '—Ç—Ä–µ–Ω–¥—ã', 'trends', '–Ω–æ–≤–æ—Å—Ç–∏', 'news', '–≥–∞–¥–∂–µ—Ç—ã', 'gadgets'
]

# –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
MAX_POSTS_PER_DAY = 10

def clean_text(text):
    text = re.sub(phone_pattern, '[–Ω–æ–º–µ—Ä —Å–∫—Ä—ã—Ç]', text)
    text = re.sub(username_pattern, '', text)
    text = re.sub(url_pattern, '[—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞]', text)
    return text.strip()

def generate_hook(text):
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π (1-5 —Å–ª–æ–≤), –ª—ë–≥–∫–∏–π –∏ –∑–∞–≤–ª–µ–∫–∞—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è IT-–ø–æ—Å—Ç–∞ —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏:\n{text}"
    response = client_openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=20
    )
    return response.choices[0].message.content.strip()

def unique_text(text):
    prompt = f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –ª—ë–≥–∫–æ–º, –ø—Ä–æ—Å—Ç–æ–º –∏ –∑–∞–≤–ª–µ–∫–∞—é—â–µ–º —Å—Ç–∏–ª–µ –¥–ª—è IT-—à–Ω–∏–∫–æ–≤ –∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –¥–æ–±–∞–≤—å —Å–º–∞–π–ª–∏–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π** –∏–ª–∏ *–∫—É—Ä—Å–∏–≤* –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è:\n{text}"
    response = client_openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=200
    )
    return response.choices[0].message.content

def add_it_hashtags(text):
    hashtags = []
    if re.search(r'code|coding|–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞|development', text, re.IGNORECASE):
        hashtags.append('#–∫–æ–¥–∏–Ω–≥ üíª')
    if re.search(r'–±–æ—Ç|bot|–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è|automation|AI|–ò–ò', text, re.IGNORECASE):
        hashtags.append('#–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è ü§ñ')
    if re.search(r'—Ñ—Ä–∏–ª–∞–Ω—Å|freelance|–∑–∞—Ä–∞–±–æ—Ç–æ–∫|money|—Ä–∞–±–æ—Ç–∞|job', text, re.IGNORECASE):
        hashtags.append('#—Ñ—Ä–∏–ª–∞–Ω—Å üí∏')
    if re.search(r'–∫–æ–Ω—Ç–µ–Ω—Ç|content|–º–∞—Ä–∫–µ—Ç–∏–Ω–≥|marketing|–ª–µ–Ω–¥–∏–Ω–≥|landing', text, re.IGNORECASE):
        hashtags.append('#–∫–æ–Ω—Ç–µ–Ω—Ç üìù')
    if re.search(r'–¥–∏–∑–∞–π–Ω|design|UI|UX|–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', text, re.IGNORECASE):
        hashtags.append('#–¥–∏–∑–∞–π–Ω üé®')
    if re.search(r'tech|IT|—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏|software|–ø—Ä–æ–≥—Ä–∞–º–º–∞|tools|–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', text, re.IGNORECASE):
        hashtags.append('#—Ç–µ—Ö–Ω–æ ‚öôÔ∏è')
    if re.search(r'—Å—Ç–∞—Ä—Ç–∞–ø|startup|–ø—Ä–æ–¥—É–∫—Ç|product|–ø—Ä–æ–¥–∞–∂–∏|sales', text, re.IGNORECASE):
        hashtags.append('#—Å—Ç–∞—Ä—Ç–∞–ø—ã üöÄ')
    if re.search(r'—Ç—Ä–µ–Ω–¥—ã|trends|–Ω–æ–≤–æ—Å—Ç–∏|news|–≥–∞–¥–∂–µ—Ç—ã|gadgets', text, re.IGNORECASE):
        hashtags.append('#—Ç—Ä–µ–Ω–¥—ã üî•')
    return text + "\n\n" + ' '.join(sorted(set(hashtags)))

def get_last_message_id():
    if os.path.exists(last_id_file):
        with open(last_id_file, 'r') as file:
            return int(file.read())
    return 0

def save_last_message_id(message_id):
    with open(last_id_file, 'w') as file:
        file.write(str(message_id))

async def copy_filtered_messages():
    print("üöÄ –ó–∞–ø—É—Å–∫: 10 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å...")
    await client.connect()

    if not await client.is_user_authorized():
        print("‚ùó –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        try:
            await client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
            await client.sign_in(phone, code)
        except SessionPasswordNeededError:
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            await client.sign_in(password=password)

    destination = await client.get_input_entity(destination_channel)
    last_message_id = get_last_message_id()
    all_messages = []

    for source_channel in source_channels:
        try:
            source = await client.get_input_entity(source_channel)
            print(f"üîó –ü–∞—Ä—Å–∏–Ω–≥ {source_channel}...")
            async for message in client.iter_messages(source):
                if message.id > last_message_id and message.text and any(keyword.lower() in message.text.lower() for keyword in keywords):
                    all_messages.append((source_channel, message))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {source_channel}: {e}")

    all_messages.sort(key=lambda x: x[1].id, reverse=True)
    posts_to_send = all_messages[:MAX_POSTS_PER_DAY]
    message_count = 0

    for i, (source_channel, message) in enumerate(posts_to_send):
        media_files = []
        cleaned_text = clean_text(message.text or '')
        
        hook = generate_hook(cleaned_text)
        unique_caption = unique_text(cleaned_text)
        final_text = f"{hook}\n\n{unique_caption}"
        final_text = add_it_hashtags(final_text[:500])
        final_caption = final_text[:1024]

        if isinstance(message.media, MessageMediaPhoto):
            media_files.append(message.media.photo)
        elif isinstance(message.media, MessageMediaDocument):
            media_files.append(message.media.document)

        try:
            if media_files:
                await client.send_file(destination, media_files, caption=final_caption)
                print(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {source_channel} (ID={message.id})")
            else:
                await client.send_message(destination, final_caption)
                print(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ {source_channel} (ID={message.id})")

            message_count += 1
            save_last_message_id(message.id)
            if i < len(posts_to_send) - 1:
                await asyncio.sleep(3600)  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥

        except RPCError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            if "FloodWait" in str(e):
                wait_time = int(re.search(r'(\d+)', str(e)).group(1))
                await asyncio.sleep(wait_time)

    print(f"\nüéâ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    await client.disconnect()

def job():
    asyncio.run(copy_filtered_messages())

def run_forever():
    while True:
        job()
        print("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
        time.sleep(86400)  # 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    run_forever()